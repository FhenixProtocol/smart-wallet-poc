/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { FhenixMappedOutputTypes } from "./encryption/types";
import { Abi } from "viem";
import { ExtractAbiFunction, AbiParametersToPrimitiveTypes } from "abitype";

const deployedContracts = {
  412346: {
    Counter: {
      address: "0xbeb4eF1fcEa618C6ca38e3828B00f8D481EC2CC2",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "InvalidShortString",
          type: "error",
        },
        {
          inputs: [],
          name: "SignerNotMessageSender",
          type: "error",
        },
        {
          inputs: [],
          name: "SignerNotOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "str",
              type: "string",
            },
          ],
          name: "StringTooLong",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [],
          name: "EIP712DomainChanged",
          type: "event",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes",
                  name: "data",
                  type: "bytes",
                },
                {
                  internalType: "int32",
                  name: "securityZone",
                  type: "int32",
                },
              ],
              internalType: "struct inEuint32",
              name: "encryptedValue",
              type: "tuple",
            },
          ],
          name: "add",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "eip712Domain",
          outputs: [
            {
              internalType: "bytes1",
              name: "fields",
              type: "bytes1",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "version",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "chainId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "verifyingContract",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
            {
              internalType: "uint256[]",
              name: "extensions",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "publicKey",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              internalType: "struct Permission",
              name: "permission",
              type: "tuple",
            },
          ],
          name: "getCounterPermit",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "bytes32",
                  name: "publicKey",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
              internalType: "struct Permission",
              name: "permission",
              type: "tuple",
            },
          ],
          name: "getCounterPermitSealed",
          outputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "data",
                  type: "string",
                },
                {
                  internalType: "uint8",
                  name: "_utype",
                  type: "uint8",
                },
              ],
              internalType: "struct SealedUint",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {
        eip712Domain: "@fhenixprotocol/contracts/access/Permissioned.sol",
      },
    },
  },
} as const;

type CounterAbi = (typeof deployedContracts)[412346]["Counter"]["abi"];

export type AbiFunctionOutputs<TAbi extends Abi, TFunctionName extends string> = ExtractAbiFunction<
  TAbi,
  TFunctionName
>["outputs"];

type test = FhenixMappedOutputTypes<
  AbiParametersToPrimitiveTypes<AbiFunctionOutputs<CounterAbi, "getCounterPermitSealed">>,
  true
>;
